# Generated from .\antlr\ltl.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


'''
Auto-generated by ANTLR4. Please check ltl.g4 for grammar details.
'''


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\16")
        buf.write(" \4\2\t\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\5\2\r\n\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\7\2\33")
        buf.write("\n\2\f\2\16\2\36\13\2\3\2\2\3\2\3\2\2\3\3\2\5\b\2$\2\f")
        buf.write("\3\2\2\2\4\5\b\2\1\2\5\6\7\3\2\2\6\7\5\2\2\2\7\b\7\4\2")
        buf.write("\2\b\r\3\2\2\2\t\r\7\r\2\2\n\13\t\2\2\2\13\r\5\2\2\7\f")
        buf.write("\4\3\2\2\2\f\t\3\2\2\2\f\n\3\2\2\2\r\34\3\2\2\2\16\17")
        buf.write("\f\6\2\2\17\20\7\t\2\2\20\33\5\2\2\7\21\22\f\5\2\2\22")
        buf.write("\23\7\n\2\2\23\33\5\2\2\6\24\25\f\4\2\2\25\26\7\13\2\2")
        buf.write("\26\33\5\2\2\5\27\30\f\3\2\2\30\31\7\f\2\2\31\33\5\2\2")
        buf.write("\4\32\16\3\2\2\2\32\21\3\2\2\2\32\24\3\2\2\2\32\27\3\2")
        buf.write("\2\2\33\36\3\2\2\2\34\32\3\2\2\2\34\35\3\2\2\2\35\3\3")
        buf.write("\2\2\2\36\34\3\2\2\2\5\f\32\34")
        return buf.getvalue()


class ltlParser ( Parser ):

    grammarFileName = "ltl.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'('", "')'", "'!'", "'F'", "'G'", "'X'", 
                     "'->'", "'/\\'", "'\\/'", "'U'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "AP", "WS" ]

    RULE_formula = 0

    ruleNames =  [ "formula" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    AP=11
    WS=12

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class FormulaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ltlParser.RULE_formula

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnaryExprContext(FormulaContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ltlParser.FormulaContext
            super().__init__(parser)
            self.op = None # Token
            self.child = None # FormulaContext
            self.copyFrom(ctx)

        def formula(self):
            return self.getTypedRuleContext(ltlParser.FormulaContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpr" ):
                return visitor.visitUnaryExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParFormulaContext(FormulaContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ltlParser.FormulaContext
            super().__init__(parser)
            self.child = None # FormulaContext
            self.copyFrom(ctx)

        def formula(self):
            return self.getTypedRuleContext(ltlParser.FormulaContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParFormula" ):
                return visitor.visitParFormula(self)
            else:
                return visitor.visitChildren(self)


    class BinaryExprContext(FormulaContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ltlParser.FormulaContext
            super().__init__(parser)
            self.lhs = None # FormulaContext
            self.op = None # Token
            self.rhs = None # FormulaContext
            self.copyFrom(ctx)

        def formula(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ltlParser.FormulaContext)
            else:
                return self.getTypedRuleContext(ltlParser.FormulaContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryExpr" ):
                return visitor.visitBinaryExpr(self)
            else:
                return visitor.visitChildren(self)


    class ApContext(FormulaContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ltlParser.FormulaContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AP(self):
            return self.getToken(ltlParser.AP, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAp" ):
                return visitor.visitAp(self)
            else:
                return visitor.visitChildren(self)



    def formula(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ltlParser.FormulaContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 0
        self.enterRecursionRule(localctx, 0, self.RULE_formula, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ltlParser.T__0]:
                localctx = ltlParser.ParFormulaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3
                self.match(ltlParser.T__0)
                self.state = 4
                localctx.child = self.formula(0)
                self.state = 5
                self.match(ltlParser.T__1)
                pass
            elif token in [ltlParser.AP]:
                localctx = ltlParser.ApContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7
                self.match(ltlParser.AP)
                pass
            elif token in [ltlParser.T__2, ltlParser.T__3, ltlParser.T__4, ltlParser.T__5]:
                localctx = ltlParser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 8
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ltlParser.T__2) | (1 << ltlParser.T__3) | (1 << ltlParser.T__4) | (1 << ltlParser.T__5))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9
                localctx.child = self.formula(5)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 26
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 24
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                    if la_ == 1:
                        localctx = ltlParser.BinaryExprContext(self, ltlParser.FormulaContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula)
                        self.state = 12
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 13
                        localctx.op = self.match(ltlParser.T__6)
                        self.state = 14
                        localctx.rhs = self.formula(5)
                        pass

                    elif la_ == 2:
                        localctx = ltlParser.BinaryExprContext(self, ltlParser.FormulaContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula)
                        self.state = 15
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 16
                        localctx.op = self.match(ltlParser.T__7)
                        self.state = 17
                        localctx.rhs = self.formula(4)
                        pass

                    elif la_ == 3:
                        localctx = ltlParser.BinaryExprContext(self, ltlParser.FormulaContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula)
                        self.state = 18
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 19
                        localctx.op = self.match(ltlParser.T__8)
                        self.state = 20
                        localctx.rhs = self.formula(3)
                        pass

                    elif la_ == 4:
                        localctx = ltlParser.BinaryExprContext(self, ltlParser.FormulaContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_formula)
                        self.state = 21
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 22
                        localctx.op = self.match(ltlParser.T__9)
                        self.state = 23
                        localctx.rhs = self.formula(2)
                        pass

             
                self.state = 28
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[0] = self.formula_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def formula_sempred(self, localctx:FormulaContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         




